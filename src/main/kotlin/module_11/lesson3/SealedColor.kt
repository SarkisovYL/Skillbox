package module_11.lesson3

sealed class SealedColor(val nex: String) {
//    Раньше наследники должны были описываться в теле сингл-класса, подобно enum,
//    Теперь с выходом новых версий языка это уже не обязательно, но многие это еще используют.
//    Начиная с версии kotlin 1.5 наследников можно располагать в этом же файле или в другом.
//    Наследниками изолированного класса могут выступать object объекты или другие классы.
//    Синглтон наследники изолированного класса.
//    TODO Если подтип sealed класса описан c помощью object, то это сродни элементу перечисления
//     и такой элемент может существовать в ЕДИНСТВЕННОМ ЭКЗЕМПЛЯРЕ. Если описан с помощью класса -
//     то таких объектов может быть несколько и в этом раскрывается гибкость sealed классов.
//     В отличии от перечислений, элементы sealed класса могут хранить состояния
    object While : SealedColor("FFF")
    object Black : SealedColor("000")
    object Red : SealedColor("F00")
    object Green : SealedColor("0F0")
    object Blue : SealedColor("00F")

//    Описание объекта в виде класса
    class CustomColor(nex: String) : SealedColor(nex)
}
